#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS

#include<iostream>
#include<WinSock2.h>
#include<vector>
#include<list>

#pragma comment(lib, "Ws2_32.lib")
using namespace std;

//struktura na dane dla watkow klientow
struct dane
{	
	dane(SOCKET socket)
	{
		strcpy(nick, "User");
		this->socket = socket;
	}
	SOCKET socket;
	DWORD id;
	char nick[30];

};
typedef struct dane dane;


//struktura zawierajaca wektor watkow i liste danych klientow
//uzywana glownie przez sprawdzacza odlaczenia klientow
struct disChdata
{
	vector<HANDLE> klienci;
	list<struct dane> dane_klientow;
}klienciData;

typedef struct disChdata disChdata;



HANDLE disconnetChecker;
DWORD idDisCh;


//fcje
DWORD WINAPI klient(void *argumenty); //watek klienta
DWORD WINAPI checkDisconnect(void *argumenty);	//watek sprawdzenia odlaczenia
void sendMsg(char * msg, SOCKET socket);	//wyskaleni wiadomosci do danego socket
void sendToAllMsg(char * msg);	//wyslanie wiadomosci do wszysktich klientow



//SERWER
int main()
{
	//ladowanie biblioteki
	WSADATA wsas;
	int result;
	WORD wersja;
	wersja = MAKEWORD(1, 1);
	result =WSAStartup(wersja, &wsas);
	//jezeli sie uda
	if (result == 0)
	{
		SOCKET s;
		s = socket(AF_INET, SOCK_STREAM, 0);

		struct sockaddr_in sa;
		memset((void *)(&sa), 0, sizeof(sa));
		sa.sin_family = AF_INET;
		sa.sin_port = htons(0);	//automatyczne przydzielenie portu
		sa.sin_addr.s_addr = htonl(INADDR_ANY);	
		result = bind(s, (struct sockaddr FAR*)&sa, sizeof(sa));

		//pobranie portu
		int len = sizeof(sa);
		getsockname(s, (struct sockaddr *)&sa, &len);
		printf("Numer portu: %d\n", ntohs(sa.sin_port));	//ntohs zamiana  warto�ci  unsigned  short  na  format  przyj�ty  w
															//lokalnym komputerze(zmiana kolejno�ci bajt�w)

		if (result == 0)
		{
			
			result = listen(s, 5);
			if (result == 0)
			{
				SOCKET si;
				struct sockaddr_in sc;
				int lenc;
				//utworzenie watku sprawdzacza odlaczen
				disconnetChecker = CreateThread(NULL, 0, checkDisconnect, (void*)&klienciData, 0, &idDisCh);
				while (true)
				{
					
					lenc = sizeof(sc);
					si = accept(s, (struct sockaddr FAR *) &sc, &lenc);
					if (si != INVALID_SOCKET)
					{
						//utowrzenie watku klienta
						klienciData.dane_klientow.push_back(dane(si));
						klienciData.klienci.push_back(CreateThread(NULL, 0, klient, (void*)&(klienciData.dane_klientow.back()), 0, &(klienciData.dane_klientow.back().id)));
												
					}
					
				}
			}
			else
			{
				cout << "Problem z nasluchiwaniem" << endl;
			}
			
		}
		else
		{
			cout << "Problem z zbindowaniem" << endl;
		}

	}
	else
	{
		cout<<"Problem z za�adowanie biblioteki Winsoc"<<endl;
	}


	WSACleanup();
	getchar();
	return 0;
}

void sendToAllMsg(char * msg)
{
	//dla kazdego socketu na liscie wyslij opdana wiadomosc
	for (list<dane>::iterator it = klienciData.dane_klientow.begin(); it != klienciData.dane_klientow.end(); ++it)
	{
		sendMsg(msg, it->socket);
	}
}

void sendMsg(char * msg, SOCKET socket)
{
	char buf[80];
	strcpy(buf, msg);
	int dlug = strlen(buf);
	buf[dlug] = '\0';
	send(socket, buf, dlug+1, 0);
}


DWORD WINAPI checkDisconnect(void *argumenty)
{
	disChdata *th_dane = (disChdata*)argumenty;
	DWORD kodWyj = -1;
	while (true)
	{

		//dla kazdego watku klienta
		for (int i = 0; i < th_dane->klienci.size(); i++)
		{
			//pobierz exit code
			GetExitCodeThread(th_dane->klienci[i], &kodWyj);

			//jak zero
			if (kodWyj == 0)
			{	
				//znajdz odpowiadajaca strukture danych
				list<dane>::iterator it = std::next(th_dane->dane_klientow.begin(), i);

				//usun uchwyt na watek odlaczonego klienta
				th_dane->klienci.erase(th_dane->klienci.begin() + i);
		
				//przygotuj komunikat
				char komunikat[60];
				printf("--- %s zostal odlaczony.\n", it->nick);
				sprintf(komunikat, "--- %s zostal odlaczony.\n", it->nick);

				//usun dane i wyslij do wszystkich
				th_dane->dane_klientow.erase(it);
				sendToAllMsg(komunikat);

			}
		}
	}
	return 0;
}


DWORD WINAPI klient(void *argumenty)
{
	
	dane *th_dane = (dane*)argumenty;
	int result;
	char buf[80];
	char buff2[130];
	strcpy(buf, "");

	//pobieranie nicku
	sendMsg("SERWER: Podaj nick(max 30 znakow): ", th_dane->socket);

	//oczekiwanie na przeslanie nicku
	while (strcmp(buf, "")==0)
	{
		result = recv(th_dane->socket, buf, 80, 0);

		//jezeli uzytkownij sie odlaczyl to zakoncz
		if (result == SOCKET_ERROR)
		{
			closesocket(th_dane->socket);
			return 0;
		}
	}
	
	strcpy(th_dane->nick, buf);

	//wyslanie komunikato o daleczeniu do wszystkich uzytkownikow
	sprintf(buf, "--- %s: dolaczyl do czatu.\n", th_dane->nick);
	printf("--- %s dolaczyl do czatu.\n", th_dane->nick);
	sendToAllMsg(buf);
	
	
	do
	{
		result = recv(th_dane->socket, buf, 80, 0);
		if (result == SOCKET_ERROR)
		{
			closesocket(th_dane->socket);
			return 0;
		}

		//przygotowanie tesci wiadomosci i wyslanie do wszystkich klientow
		printf(">>>%s: %s\n", th_dane->nick, buf);
		sprintf(buff2, ">>>%s: %s\n", th_dane->nick, buf);
		sendToAllMsg(buff2);
			
	} while (result>0);
		
	return 0;

}